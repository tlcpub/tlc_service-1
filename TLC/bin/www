#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = express();
var debug = require('debug');
var http = require('http');

const OK = debug('HTTP:200');
const MOVED = debug('HTTP:301');
const FOUND = debug('HTTP:302');
const UNAUTOHORIZED = debug('HTTP:403');
const NOTFOUND = debug('HTTP:404');
const DBCONNECTION = debug('HTTP:500');


const admin = debug('app:admin');

const login = debug('app:login');
const logout = debug('app:logout');

const users = debug('app:users');
const board = debug('app:board');
const contact = debug('app:contact');
const convert = debug('app:convert');

const index = debug('app:index');
const intro = debug('app:intro');
const layout= debug('app:layout');
const member= debug('app:member'); 
const notice= debug('app:notice');

const register=debug('app:register');

const db = debug('app:database');
const HTTP = debug('app:http');

const LOG = debug('*:*');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */


'use strict';

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


const express = require('express');

const PORT = 3000;
const HOST = '192.168.99.1';


app.get('/', (req, res) => {
  res.send('server connected...\n');
});

app.listen(PORT, HOST);
console.log(`Running on http://${HOST}:${PORT}`);

module.exports = { 
  app,
  admin,
  board,
  contact,
  convert,
  index,
  intro,
  layout,  
  login,
  logout,
  member,
  notice,
  register,
  users,   
  HTTP,
  LOG,
  db
};
  
  
